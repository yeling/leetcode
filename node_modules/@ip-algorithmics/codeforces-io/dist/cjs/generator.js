#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const argv = require('yargs/yargs')(process.argv.slice(2))
    .usage('Usage: $0 <path> [options]')
    .command('path', 'Creates a solution folder using the path')
    .example('$0 ./TotallyAProblemToSolve', 'Creates the folder TotallyAProblemToSolve in the current folder')
    .alias('js', 'useJs')
    .nargs('js', 0)
    .describe('js', 'Use Javascript instead of Typescript')
    .alias('cjs', 'useCjs')
    .nargs('cjs', 0)
    .describe('cjs', 'Use require from CommonJs instead ES6 imports')
    .alias('f', 'file')
    .nargs('f', 1)
    .describe('f', 'File name, defaults to index')
    .alias('c', 'comment')
    .nargs('c', 1)
    .describe('c', 'File name, defaults to index')
    .help('h')
    .alias('h', 'help').argv;
// .epilog('copyright 2021')
const options = {
    path: (_a = argv._[0]) !== null && _a !== void 0 ? _a : './New Solution',
    js: (_b = argv.js) !== null && _b !== void 0 ? _b : false,
    cjs: (_c = argv.cjs) !== null && _c !== void 0 ? _c : false,
    file: (_d = argv.file) !== null && _d !== void 0 ? _d : 'index',
    comment: (_e = argv.comment) !== null && _e !== void 0 ? _e : ''
};
function createFolderRecursively(path) {
    fs_1.default.mkdirSync(path, { recursive: true });
}
function createFile(path, file, content) {
    fs_1.default.writeFileSync(`${path}/${file}`, content);
}
const importLibrary = options.cjs
    ? "const { readline, print, testOutput, console } = require('@ip-algorithmics/codeforces-io');"
    : "import { readline, print, testOutput, console } from '@ip-algorithmics/codeforces-io';";
const file = options.js ? `${options.file}.js` : `${options.file}.ts`;
const content = `// ${options.comment}
${importLibrary}


testOutput();
${options.js ? '' : 'export {};'}
`;
createFolderRecursively(options.path);
createFile(options.path, 'input.txt', '');
createFile(options.path, 'output.txt', '');
createFile(options.path, file, content);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0EsNENBQW9CO0FBRXBCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNyRCxLQUFLLENBQUMsNEJBQTRCLENBQUM7S0FDbkMsT0FBTyxDQUFDLE1BQU0sRUFBRSwwQ0FBMEMsQ0FBQztLQUMzRCxPQUFPLENBQ0osNkJBQTZCLEVBQzdCLGlFQUFpRSxDQUNwRTtLQUNBLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO0tBQ3BCLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQ2QsUUFBUSxDQUFDLElBQUksRUFBRSxzQ0FBc0MsQ0FBQztLQUN0RCxLQUFLLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQztLQUN0QixLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNmLFFBQVEsQ0FBQyxLQUFLLEVBQUUsK0NBQStDLENBQUM7S0FDaEUsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7S0FDbEIsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7S0FDYixRQUFRLENBQUMsR0FBRyxFQUFFLDhCQUE4QixDQUFDO0tBQzdDLEtBQUssQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDO0tBQ3JCLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQ2IsUUFBUSxDQUFDLEdBQUcsRUFBRSw4QkFBOEIsQ0FBQztLQUM3QyxJQUFJLENBQUMsR0FBRyxDQUFDO0tBQ1QsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDN0IsNEJBQTRCO0FBRTVCLE1BQU0sT0FBTyxHQUFHO0lBQ1osSUFBSSxFQUFFLE1BQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsbUNBQUksZ0JBQWdCO0lBQ25DLEVBQUUsRUFBRSxNQUFBLElBQUksQ0FBQyxFQUFFLG1DQUFJLEtBQUs7SUFDcEIsR0FBRyxFQUFFLE1BQUEsSUFBSSxDQUFDLEdBQUcsbUNBQUksS0FBSztJQUN0QixJQUFJLEVBQUUsTUFBQSxJQUFJLENBQUMsSUFBSSxtQ0FBSSxPQUFPO0lBQzFCLE9BQU8sRUFBRSxNQUFBLElBQUksQ0FBQyxPQUFPLG1DQUFJLEVBQUU7Q0FDOUIsQ0FBQztBQUVGLFNBQVMsdUJBQXVCLENBQUMsSUFBWTtJQUN6QyxZQUFFLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLE9BQWU7SUFDM0QsWUFBRSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksSUFBSSxJQUFJLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBRUQsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLEdBQUc7SUFDN0IsQ0FBQyxDQUFDLDZGQUE2RjtJQUMvRixDQUFDLENBQUMsd0ZBQXdGLENBQUM7QUFFL0YsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksS0FBSyxDQUFDO0FBQ3RFLE1BQU0sT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLE9BQU87RUFDbkMsYUFBYTs7OztFQUliLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWTtDQUMvQixDQUFDO0FBRUYsdUJBQXVCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMxQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDM0MsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuY29uc3QgYXJndiA9IHJlcXVpcmUoJ3lhcmdzL3lhcmdzJykocHJvY2Vzcy5hcmd2LnNsaWNlKDIpKVxuICAgIC51c2FnZSgnVXNhZ2U6ICQwIDxwYXRoPiBbb3B0aW9uc10nKVxuICAgIC5jb21tYW5kKCdwYXRoJywgJ0NyZWF0ZXMgYSBzb2x1dGlvbiBmb2xkZXIgdXNpbmcgdGhlIHBhdGgnKVxuICAgIC5leGFtcGxlKFxuICAgICAgICAnJDAgLi9Ub3RhbGx5QVByb2JsZW1Ub1NvbHZlJyxcbiAgICAgICAgJ0NyZWF0ZXMgdGhlIGZvbGRlciBUb3RhbGx5QVByb2JsZW1Ub1NvbHZlIGluIHRoZSBjdXJyZW50IGZvbGRlcidcbiAgICApXG4gICAgLmFsaWFzKCdqcycsICd1c2VKcycpXG4gICAgLm5hcmdzKCdqcycsIDApXG4gICAgLmRlc2NyaWJlKCdqcycsICdVc2UgSmF2YXNjcmlwdCBpbnN0ZWFkIG9mIFR5cGVzY3JpcHQnKVxuICAgIC5hbGlhcygnY2pzJywgJ3VzZUNqcycpXG4gICAgLm5hcmdzKCdjanMnLCAwKVxuICAgIC5kZXNjcmliZSgnY2pzJywgJ1VzZSByZXF1aXJlIGZyb20gQ29tbW9uSnMgaW5zdGVhZCBFUzYgaW1wb3J0cycpXG4gICAgLmFsaWFzKCdmJywgJ2ZpbGUnKVxuICAgIC5uYXJncygnZicsIDEpXG4gICAgLmRlc2NyaWJlKCdmJywgJ0ZpbGUgbmFtZSwgZGVmYXVsdHMgdG8gaW5kZXgnKVxuICAgIC5hbGlhcygnYycsICdjb21tZW50JylcbiAgICAubmFyZ3MoJ2MnLCAxKVxuICAgIC5kZXNjcmliZSgnYycsICdGaWxlIG5hbWUsIGRlZmF1bHRzIHRvIGluZGV4JylcbiAgICAuaGVscCgnaCcpXG4gICAgLmFsaWFzKCdoJywgJ2hlbHAnKS5hcmd2O1xuLy8gLmVwaWxvZygnY29weXJpZ2h0IDIwMjEnKVxuXG5jb25zdCBvcHRpb25zID0ge1xuICAgIHBhdGg6IGFyZ3YuX1swXSA/PyAnLi9OZXcgU29sdXRpb24nLFxuICAgIGpzOiBhcmd2LmpzID8/IGZhbHNlLFxuICAgIGNqczogYXJndi5janMgPz8gZmFsc2UsXG4gICAgZmlsZTogYXJndi5maWxlID8/ICdpbmRleCcsXG4gICAgY29tbWVudDogYXJndi5jb21tZW50ID8/ICcnXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVGb2xkZXJSZWN1cnNpdmVseShwYXRoOiBzdHJpbmcpIHtcbiAgICBmcy5ta2RpclN5bmMocGF0aCwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZpbGUocGF0aDogc3RyaW5nLCBmaWxlOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZykge1xuICAgIGZzLndyaXRlRmlsZVN5bmMoYCR7cGF0aH0vJHtmaWxlfWAsIGNvbnRlbnQpO1xufVxuXG5jb25zdCBpbXBvcnRMaWJyYXJ5ID0gb3B0aW9ucy5janNcbiAgICA/IFwiY29uc3QgeyByZWFkbGluZSwgcHJpbnQsIHRlc3RPdXRwdXQsIGNvbnNvbGUgfSA9IHJlcXVpcmUoJ0BpcC1hbGdvcml0aG1pY3MvY29kZWZvcmNlcy1pbycpO1wiXG4gICAgOiBcImltcG9ydCB7IHJlYWRsaW5lLCBwcmludCwgdGVzdE91dHB1dCwgY29uc29sZSB9IGZyb20gJ0BpcC1hbGdvcml0aG1pY3MvY29kZWZvcmNlcy1pbyc7XCI7XG5cbmNvbnN0IGZpbGUgPSBvcHRpb25zLmpzID8gYCR7b3B0aW9ucy5maWxlfS5qc2AgOiBgJHtvcHRpb25zLmZpbGV9LnRzYDtcbmNvbnN0IGNvbnRlbnQgPSBgLy8gJHtvcHRpb25zLmNvbW1lbnR9XG4ke2ltcG9ydExpYnJhcnl9XG5cblxudGVzdE91dHB1dCgpO1xuJHtvcHRpb25zLmpzID8gJycgOiAnZXhwb3J0IHt9Oyd9XG5gO1xuXG5jcmVhdGVGb2xkZXJSZWN1cnNpdmVseShvcHRpb25zLnBhdGgpO1xuY3JlYXRlRmlsZShvcHRpb25zLnBhdGgsICdpbnB1dC50eHQnLCAnJyk7XG5jcmVhdGVGaWxlKG9wdGlvbnMucGF0aCwgJ291dHB1dC50eHQnLCAnJyk7XG5jcmVhdGVGaWxlKG9wdGlvbnMucGF0aCwgZmlsZSwgY29udGVudCk7XG4iXX0=