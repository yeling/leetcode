
# auther yeling
from typing import List
from bisect import *
from collections import *
from functools import *
from itertools import *
from math import *
from queue import PriorityQueue


MOD = 10 ** 9 + 7

class TaskTime(object):
    # serverId, priority, endTime = params
    def __init__(self, serverId, priority, endTime ):
        self.serverId = serverId
        self.priority = priority
        self.endTime = endTime
    
    def __lt__(self, other):
        if self.endTime == other.endTime:
            if self.priority == other.priority:
                return self.serverId < other.serverId
            else:
                return self.priority < other.priority
        else:
            return self.endTime < other.endTime
                   
    def __str__(self):
        return '(' + str(self.serverId)+',' + str(self.priority)+',' + str(self.endTime) + ')'


class Solution:
    #1.两个优先队列，空余队列，工作队列
    # 26 / 36
    # 31 / 36
    # 30 / 36 
    # AC
    def assignTasks3(self, servers: List[int], tasks: List[int]) -> List[int]:
        stack = PriorityQueue()
        for i, v in enumerate(servers):
            stack.put(TaskTime(i, v, 0))
        currTime = 0
        res = []
        workingStack = PriorityQueue()
        waitingTask = []
        i = 0
        while i < len(tasks):
            t = tasks[i]
            waitingTask.append(t)
            currTime = max(currTime, i)
            # print(res, currTime)
            while not workingStack.empty():
                curr = workingStack.get()
                if curr.endTime <= currTime:
                    stack.put(TaskTime(curr.serverId, curr.priority, 0))
                else:
                    workingStack.put(curr)
                    break
                    
            if not stack.empty():
                curr = stack.get()
                res.append(curr.serverId)
                workingStack.put(TaskTime(curr.serverId, curr.priority, t + currTime)) 
                # currTime += 1
            else:
                #取出最小的时间，走一下，可能多个任务在等待
                #currTime可能大于i，不再自动增长，跟着i走
                # print("waiting",i, t)
                curr = workingStack.get()
                res.append(curr.serverId)
                currTime = curr.endTime
                workingStack.put(TaskTime(curr.serverId, curr.priority, t + currTime))
                # currTime += 1

            i+= 1
            

        return res
    
    
sol = Solution()
servers = [3,3,2]
tasks = [1,2,3,2,1,2]
servers = [10,63,95,16,85,57,83,95,6,29,71]
tasks = [70,31,83,15,32,67,98,65,56,48,38,90,5]

# servers = [5,1,4,3,2]
# tasks = [2,1,2,4,5,2,1]

servers = [10,63,95,16,85,57,83,95,6,29,71]
tasks = [70,31,83,15,32,67,98,65,56,48,38,90,5]

# servers = [338,890,301,532,284,930,426,616,919,267,571,140,716,859,980,469,628,490,195,664,925,652,503,301,917,563,82,947,910,451,366,190,253,516,503,721,889,964,506,914,986,718,520,328,341,765,922,139,911,578,86,435,824,321,942,215,147,985,619,865]
# tasks = [773,537,46,317,233,34,712,625,336,221,145,227,194,693,981,861,317,308,400,2,391,12,626,265,710,792,620,416,267,611,875,361,494,128,133,157,638,632,2,158,428,284,847,431,94,782,888,44,117,489,222,932,494,948,405,44,185,587,738,164,356,783,276,547,605,609,930,847,39,579,768,59,976,790,612,196,865,149,975,28,653,417,539,131,220,325,252,160,761,226,629,317,185,42,713,142,130,695,944,40,700,122,992,33,30,136,773,124,203,384,910,214,536,767,859,478,96,172,398,146,713,80,235,176,876,983,363,646,166,928,232,699,504,612,918,406,42,931,647,795,139,933,746,51,63,359,303,752,799,836,50,854,161,87,346,507,468,651,32,717,279,139,851,178,934,233,876,797,701,505,878,731,468,884,87,921,782,788,803,994,67,905,309,2,85,200,368,672,995,128,734,157,157,814,327,31,556,394,47,53,755,721,159,843]
# print(sol.assignTasks(servers, tasks))
print(sol.assignTasks3(servers, tasks))
# print(sol.assignTasks3(servers, tasks))


# a = [193,85,91,180,96,186,42,21,182,65,183,196,170,15,92,180,6,162,132,35,120,28,34,201,165,113,101,55,163,9,93,139,173,127,144,112,29,141,169,111,167,138,74,23,64,114,131,77,103,17,153,160,200,1,42,10,185,116,33,143,148,8,0,2,89,123,31,72,172,94,192,146,168,158,117,44,157,171,128,134,79,191,59,69,68,105,1,191,130,142,190,10,52,71,166,178,4,164,66,41,184,24,58,50,145,119,40,73,102,124,186,177,87,3,155,156,110,189,75,99,38,27,45,43,7,100,195,19,149,188,52,99,159,61,113,104,63,66,152,106,122,107,173,151,90,176,51,125,126,118,22,82,57,129,26,62,12,37,8,142,174,107,115,181,97,20,154,14,11,25,69,200,86,136,34,199,53,81,78,70,146,3,84,121,30,16,198,140,133,5,67,135,161,19,49,194,108,187,104,88,98,45,109,76,147,18,175,95,13,56,32,125,47,48,197,179,83,137,150,129,80,39,46,54,193,36,60,65,9,123,66,184,26,188,180,110,36,96,158,182,197,36,120,174,187,113,33,170,147,120,82,64,11,188,30,196,61,90,189,71,194,47,7,191,50,98,89,131,192,7,89,137,108,32,53,142,46,112,75,0,121,73,172,4,156,78,135,53,78,176,9]
# b = [193,85,91,180,96,186,42,21,182,65,183,196,170,15,92,180,6,162,132,35,120,28,34,201,165,113,101,55,163,9,93,139,173,127,144,112,29,141,169,111,167,138,74,23,64,114,131,77,103,17,153,160,200,1,42,10,185,116,33,143,148,8,0,2,89,123,31,72,172,94,192,146,168,158,117,44,157,171,128,134,79,191,59,69,68,105,1,191,130,142,190,10,52,71,166,178,4,164,66,41,184,24,58,50,145,119,40,73,102,124,186,177,87,3,155,156,110,189,75,99,38,27,45,43,7,100,195,19,149,188,52,99,159,61,113,104,63,66,152,106,122,107,173,151,90,176,51,125,126,118,22,82,57,129,26,62,12,37,8,142,174,107,115,181,97,20,154,14,11,25,69,200,86,136,34,199,53,81,78,70,146,3,84,121,30,16,198,140,133,5,67,135,161,19,49,194,108,187,104,88,98,45,109,76,147,18,175,95,13,56,32,125,47,48,197,179,83,137,150,129,80,39,46,54,193,36,60,65,9,123,66,184,26,188,180,110,36,96,158,182,197,36,120,174,187,113,33,170,147,120,82,64,11,188,30,196,61,90,189,71,194,47,7,191,50,98,89,131,192,7,89,137,108,32,53,142,46,112,75,0,121,73,172,4,156,78,135,53,78,176,9]
# for v in zip(a,b):
#     print(v)
#     if v[0] != v[1]:
#         print('error', v)

